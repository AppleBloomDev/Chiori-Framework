=NEW VERSION=
As of August 2013, Chiori Framework has been completely recoded as a Java Based Web Server.
The development of Chiori Framework in the PHP form will be discontinued but it's evolution
will continue as Chiori Web Server. Porting the framework to Java meant more potential and more control.
The latest version now uses Groovy scripts verses PHP, Includes a feature rich extensive Plugin API and builtin TCP Server.
https://github.com/AppleBloomDev/ChioriWebServer

=About=
'''Chiori Framework''' is a PHP Framework API utilizing component based structure.
The idea is to give you the power to create amazing websites with less time and resources without reinventing the wheel.
Since it's object oriented, you can choose which parts to use.
Using this same system you can share your themes, views, templates or any other custom components
from site A to site B, C, D, etc... just by defining it in the configuration because
each install is also a repository. Don't like to share or are concerned of unauthorized transfers? No Problem,
Just customize your sharing preferences in the configuration.

=To Do=
* Reintroduce a solid Administration Panel.
* Add security mech to check foreign components for damaging code.
* Create a Sandbox Mode.

=Version History=
==Version 1.0==
Original Framework concept first using object oriented programming.
Each page would call framework in the beginning and end of each file
which was later determined to be resource intensive and more work then desired.
==Version 2.0==
First version introducing a loader that would be started using mod_rewrite.
This version also introduced built-in WebDav support, Feature later removed
due to the issue of maintaining the buggy code.
==Version 3==
===Subversion 1===
First introduction of experimental administration panel.
Panel removed in later versions but there are plans to introduce it.
===Subversion 2===
Limited Version, Used as an experimental version to Version 4.0.
==Version 4==
===Subversion 1 (Betarain)===
====Build 0101====
Fourth time completely rewriting source code from scratch.
Version 3 or prior modules not supported in this version.
====Build 0309====
Nothing more then bug fixes.
===Subversion 2 (Betadroid)===
====Build 0319====
First introduction release of component based system.
Changed some function names to be more compliment with personal coding standards.
Rewrote the Database Component to use the new PDO instead of the previous mysql commands.
This change allows multiple db connections, file based db using SQLite and other db types like oracle.
Also added a second level of containers called "Views" which allow for even less theme code.
====Build 0326====
Many more bug fixes. Finished porting 98% of the user module code to a component.
====Build 0606====
Finished porting 99% of all outdated modules and code. Fixed many more bugs.
===Subversion 3 (Sentry)===
====Build 0712====
First build safe for lite production use. Also improved local file loader,
Framework will load the index file of a requested folder if it exists.
Some core framework panel code was added to possibly introduce the
framework panel again but later decided to scrap the idea and wait till later release.
===Subversion 4 (Rainbow Dash)===
====Build 0901====
First version to appear on the GitHub. Made some bug fixes.
==Version 5==
===Subversion 0 (Fluttershy)===
====Build 1106====
Again more code rewrites to make the framework more streamlined and easier to debug.
====Build 1111====
Inported some old code which broke the framework. Fixed in next push.
====Build 1115/1116====
Bug Fixes.
===Subversion 1 (Scootaloo)===
====Build 0106/0107====
Introduced Hooks which are like event listeners. Bug Fixes.

=Installation=
==Apache Configuration==
Running this framework on a cPanel Server is not recommended and its effect are not yet known.
The examples below are designed for the Apache configuration file.
Using ".htaccess" will require slightly different syntax, which can be found online.
To fully utilize this framework (and minimize problems) you must have a fresh Apache 2.2 virtual host,
PHP 5.4, mod_rewrite installed and the following in your Apache Virtual Host Configuration File.

 <nowiki>ServerAlias *.[domainname] # Allows all subdomains to be routed to the framework
 <nowiki>RewriteEngine On # Turns apache rewrite engine on
 <nowiki>RewriteCond %{QUERY_STRING} (.*) # Saves query string for later injection
 <nowiki>RewriteCond %{REQUEST_URI} !^/favicon.ico # Excludes favicon.ico
 <nowiki>RewriteRule (.*) /Loader.php?page-requested=$1&%1 [L] # Rewrites request to the Framework Loader and forwards the query string

If a requested page is not found the framework it will attempt to load it from the local file system
but in order to reduce server inpact we recommend either using RewriteCond's to exclude things like images,
scripts and/or stylesheets by adding "RewriteCond %{REQUEST_URI} !.*\.{file_extension}$" to your apache
configuration before "RewriteRule" or by creating subdomains like images.exmaple.com and css.example.com
without the rewrites enabled.

==File Placement==
We recommend you keep your file structure the same as the repository shows but most of this can be changed
by editing configuration files. The folder requires no special permissions other then PHP (Apache)
having the ability to write files and folders to the "protected5" folder. You can symbolic link
the folder "protected5" across multiple virtual hosts, so to keep multiple websites up to date.
If your like me, You utilize the "AssignUserId" option inside your Apache Configuration,
you will need to pay extra special attention to your permissions if this is so.

== Database Configuration ==
Regardless of if your website will be using a database under this framework or not,
The framework will still need a database to keep track of it's own configuration.
We plan to get the SQLite (Flat File) support working very soon which will replace this requirement.

Example SQL files will get uploaded very soon.

=Component Rules=
Have a cool component or mod you made with our framework that you would like us to consider for offical inclusion?
We are more then happy to take a look just keep these rules in mind?
* Your component/mod must conform to resonable coding standard and be easily readable by programmers of many levels. This means heavy use of tabs, spacing and comments. File bloating is not a concern since we plan to make an engine that will compress and remove bloat from files.
* Please respect the original purpose of our framework and not change any of this.
* Be respectful of any of us that you have communication.
* We reserved the right to alter your final code that is included in our framework.

=Disclaimer=
We can not be held responsible if any code that causes any damage to your computer or lost of files.
Please only download components and mods from places you trust to minimize this rish.
